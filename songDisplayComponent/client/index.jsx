/* eslint-disable camelcase */

// Calculate relative date posted
const calculateDatePosted = (dateInteger) => {
  const today = Date.now();
  const daysSince = Math.round((today - dateInteger) / (1000 * 60 * 60 * 24));
  // If in years, record years
  if (548 > daysSince >= 350) {
    return `${Math.round(daysSince / 365, 0)} year ago`;
  }
  if (daysSince >= 350) {
    return `${Math.round(daysSince / 365, 0)} years ago`;
  }
  // If in months, record months
  if (45 > daysSince >= 27) {
    return `${Math.round(daysSince / 30, 0)} month ago`;
  }
  if (daysSince >= 27) {
    return `${Math.round(daysSince / 30, 0)} months ago`;
  }
  // If in weeks, record weeks
  if (daysSince === 7) {
    return `${Math.round(daysSince / 7, 0)} week ago`;
  }
  if (daysSince >= 6) {
    return `${Math.round(daysSince / 7, 0)} weeks ago`;
  }
  // If in days, record days
  if (daysSince === 1) {
    return `${Math.round(daysSince, 0)} day ago`;
  }
  if (daysSince > 1) {
    return `${Math.round(daysSince, 0)} days ago`;
  }
  // If in hours, record hours
  if (daysSince >= 1 / 24) {
    return `${Math.round(daysSince / 24, 1)} hours ago`;
  }
  // If in minutes, record minutes
  if (daysSince >= 1 / 1440) {
    return `${Math.round(daysSince / 1440, 0)} minutes ago`;
  }
  // If in seconds, record < 1 minute
  if (daysSince <= 1 / 1440) {
    return 'Less than a minute ago';
  }
};

// Calculate the playback time in mm:ss
const calculateMMSS = (seconds) => {
  var secondsInt = parseInt(seconds, 10);
  var minutes = Math.floor(secondsInt / 60) % 60;
  var seconds = secondsInt % 60;

  seconds = seconds < 10 ? '0' + seconds : seconds;

  return [minutes, seconds].filter((v, i) => v !== '00' || i > 0).join(':');
};

class App extends React.Component {
  constructor(props) {
    super(props);

    // Set state - mostly revolves around current song playing
    this.state = {
      // Song Audio is a JS Audio object
      currentSongAudio: new Audio(),
      // Store current song's metadata
      currentSongObj: {
        Id: 0,
        song_id: 'Song_00000',
        song_name: '',
        artist_name: '',
        upload_time: '',
        tag: '',
        song_art_url: '',
        song_data_url: '',
        background_light: '(168, 12, 20)',
        background_dark: '(68, 76, 60)',
        currentTime: 0,
        currentTimeMMSS: '00',
        durationMMSS: '00:00',
      },
      songQueueAudio: [],
      songQueueObjects: [],
      songObjs: [],
      // Store ID of interval for timer
      timerIntervalID: null,
      playButtonState: 'play',
      // Record ids of songs already played
      songsPlayedIDs: new Set(),
      songPlayerPixelWidth: 0,
    };

    // Bind functions to this
    this.setState = this.setState.bind(this);
    this.recordNextSongsLength = this.recordNextSongsLength.bind(this);
    this.playSong = this.playSong.bind(this);
    this.pauseSong = this.pauseSong.bind(this);
    this.incrementTimer = this.incrementTimer.bind(this);
    this.startTimer = this.startTimer.bind(this);
    this.stopTimer = this.stopTimer.bind(this);
    this.playNextFromQueue = this.playNextFromQueue.bind(this);
    this.initialGetThreeSongs = this.initialGetThreeSongs.bind(this);
    this.backgroundGetThreeSongs = this.backgroundGetThreeSongs.bind(this);
    this.handleSliderChange = this.handleSliderChange.bind(this);
    this.drawWaveform = this.drawWaveform.bind(this);
    this.updateWaveformColor = this.updateWaveformColor.bind(this);
  }

  // On mount, get some songs from S3; set interval to get more songs
  componentDidMount() {
    // GET songs from db
    this.initialGetThreeSongs();
    // Save component's width
    const songPlayerPixelWidth = this.divElement.clientWidth;
    this.setState({songPlayerPixelWidth});
    // Set listener to get more songs if user has fewer than two songs enqueued
    setInterval(() => {
      if (this.state.songQueueAudio.length < 2) {
        console.log('loading more songs!');
        this.backgroundGetThreeSongs();
      }
    }, 10000);
  }

  // Get three songs loaded from AWS
  initialGetThreeSongs() {
    axios
      .get('http://localhost:5001/three-songs')
      .then((response) => {
        const songObjs = response.data;
        // Create first song's audio file
        const firstSongObj = songObjs.pop();
        firstSongObj.date_posted = calculateDatePosted(
          firstSongObj.upload_time
        );
        const firstSongAudio = new Audio(firstSongObj.song_data_url);
        // Set to state then do the same for the rest of the songs
        this.setState(
          {
            currentSongObj: firstSongObj,
            currentSongAudio: firstSongAudio,
          },
          () => {
            // Draw waveform playback chart when sonds metadata is loaded
            this.state.currentSongAudio.addEventListener(
              'loadedmetadata',
              this.drawWaveform
            );
            // Create Audio object for remaining songs
            const remainingSongsAudio = [];
            for (let i = 0; i < songObjs.length; i++) {
              songObjs[i].date_posted = calculateDatePosted(
                songObjs[i].upload_time
              );
              remainingSongsAudio.push(new Audio(songObjs[i].song_data_url));
            }
            // Set state with new audio objects, song objects
            this.setState({
              songQueueAudio: remainingSongsAudio,
              songQueueObjects: songObjs,
            });
          }
        );
      })
      .catch((err) => {
        console.log(err);
      });
  }

  // Get one song loaded from AWS
  backgroundGetThreeSongs() {
    axios
      .get('http://localhost:5001/three-songs')
      .then((response) => {
        const songObjs = response.data;
        // Create Audio object for remaining songs
        const remainingSongsAudio = [];
        const remainingSongsObjs = [];
        for (let i = 0; i < songObjs.length; i++) {
          // Only process, enqueue songs not yet played
          if (!this.state.songsPlayedIDs.has(songObjs.song_id)) {
            // Convert date posted to relative data posted
            songObjs[i].date_posted = calculateDatePosted(
              songObjs[i].upload_time
            );
            remainingSongsAudio.push(new Audio(songObjs[i].song_data_url));
            remainingSongsObjs.push(songObjs[i]);
          }
        }
        // Set state with new audio objects, song objects
        this.setState({
          songQueueAudio: remainingSongsAudio,
          songQueueObjects: remainingSongsObjs,
        });
      })
      .catch((err) => {
        console.log(err);
      });
  }

  // Remove song from Audio and Obj queues; set to current song in state
  playNextFromQueue() {
    // If queue has songs, get the next one
    if (this.state.songQueueAudio.length) {
      const {songQueueAudio, songQueueObjects} = this.state;
      const songAudio = songQueueAudio.pop();
      const songObj = songQueueObjects.pop();
      // Set current playback time to 0
      songObj.currentTime = 0;
      songObj.currentTimeMMSS = calculateMMSS(songObj.currentTime);
      songObj.durationMMSS = calculateMMSS(songAudio.duration);
      // Stop current song's playback
      this.pauseSong();
      this.setState(
        {
          currentSongAudio: songAudio,
          songQueueAudio: songQueueAudio,
          songQueueObjects: songQueueObjects,
          timerIntervalID: null,
          currentSongObj: songObj,
        },
        () => {
          // Draw waveform playback chart
          this.drawWaveform();
          // Start current song's playback
          this.playSong();
        }
      );
    } else {
      this.initialGetThreeSongs();
    }
  }

  // Calculate a song's length in format MM:SS; save in state
  recordNextSongsLength(songAudio) {
    // Iteratively reduce durationRemaining to create time string
    let durationRemaining = Math.floor(songAudio.duration);
    let length = '';
    // If 1+ hours long, record those hours
    if (durationRemaining > 3600) {
      const hours = Math.floor(durationRemaining / 3600);
      length += `${hours}:`;
      durationRemaining -= hours * 3600;
    }
    // If 1+ minutes long, record those minutes
    if (durationRemaining > 60) {
      const minutes = Math.floor(durationRemaining / 60);
      length += `${minutes}:`;
      durationRemaining -= minutes * 60;
    } else {
      length += '0:';
    }
    // If 1+ seconds long, record those seconds
    if (durationRemaining > 0) {
      if (durationRemaining < 10) {
        // If sinlgle-digit, pad-
        length += JSON.stringify(durationRemaining).padStart(2, '0');
      } else {
        length += `${durationRemaining}`;
      }
    }
    // Save to state
    this.setState((state) => {
      const {currentSongObj} = state;
      currentSongObj.lengthString = length;
      return {
        currentSongObj,
      };
    });
  }

  // Start song playback if a song is selected
  playSong() {
    if (this.state.currentSongAudio) {
      console.log('playing song: ', this.state.currentSongAudio);
      // Change play button to pause button
      this.setState({playButtonState: 'pause'}, () => {
        this.state.currentSongAudio.play();
        // Listen for song to finish
        this.state.currentSongAudio.addEventListener('ended', () => {
          // Start next song
          this.playNextFromQueue();
        });
        // Start song timer
        this.startTimer();
        // Record song as having been played
        this.setState((state) => {
          return {
            songsPlayedIDs: state.songsPlayedIDs.add(
              state.currentSongObj.song_id
            ),
          };
        });
      });
    }
  }

  // Pause song playback if a song is selected
  pauseSong() {
    if (this.state.currentSongAudio) {
      // Change play button to pause button
      this.setState({playButtonState: 'play'});
      this.state.currentSongAudio.pause();
      // Stop song timer
      this.stopTimer();
    }
  }

  // Increment the current song's timer every second
  incrementTimer() {
    const currentTime = this.state.currentSongAudio.currentTime;
    const currentSongObj = this.state.currentSongObj;
    currentSongObj.currentTime = Math.floor(currentTime + 1);
    currentSongObj.currentTimeMMSS = calculateMMSS(currentSongObj.currentTime);
    this.setState({currentSongObj}, this.drawWaveform);
  }

  // Start playback timer for current song; save interval's ID in state
  startTimer() {
    // Update timer every second
    const timerIntervalID = setInterval(this.incrementTimer, 1000);
    // Record id of interval
    this.setState({
      timerIntervalID,
    });
  }

  // Stop the timer for current song playback; use timer interval ID in state
  stopTimer() {
    // Get ID of timer currently running
    const ID = this.state.timerIntervalID;
    // Clear interval with id
    clearInterval(ID);
  }

  // Toggle current place in song using the slider
  handleSliderChange(event) {
    // Save currentTime in object
    const newSongObj = this.state.currentSongObj;
    newSongObj.currentTime = event.target.value;
    // Save currentTime in audio object as well
    const newSongAudio = this.state.currentSongAudio;
    newSongAudio.currentTime = event.target.value;
    // Persis in state
    this.setState({
      test: event.target.value,
      currentSongObj: newSongObj,
      currentSongAudio: newSongAudio,
    });
  }

  // Draw playback waveform bar chart
  drawWaveform() {
    const original_data = [
      0,
      0,
      0.0426,
      -0.0384,
      0.044,
      0,
      0.0201,
      -0.036,
      0.0541,
      -0.0494,
      0.0626,
      -0.0344,
      0.0858,
      -0.0165,
      0.0768,
      -0.0204,
      0.0551,
      -0.0854,
      0.0617,
      -0.08,
      0.083,
      -0.0414,
      0.075,
      -0.0457,
      0.0401,
      -0.0939,
      0.0256,
      -0.0997,
      0.0855,
      -0.1119,
      0.2155,
      -0.4384,
      0.3039,
      -0.3221,
      0.1835,
      -0.6013,
      0.432,
      -0.3426,
      0.2094,
      -0.231,
      0.1999,
      -0.1578,
      0.3142,
      -0.2031,
      0.4022,
      -0.2963,
      0.3043,
      -0.327,
      0.3793,
      -0.2337,
      0.2589,
      -0.0987,
      0.3594,
      -0.294,
      0.2744,
      -0.1254,
      0.413,
      -0.2293,
      0.262,
      -0.1938,
      0.408,
      -0.3028,
      0.444,
      -0.3851,
      0.3796,
      -0.358,
      0.2884,
      -0.3562,
      0.1053,
      -0.1586,
      0.1366,
      -0.1231,
      0.1216,
      -0.1591,
      0.1188,
      -0.1263,
      0.2791,
      -0.1455,
      0.2925,
      -0.1051,
      0.2131,
      -0.1403,
      0.3043,
      -0.2366,
      0.2181,
      -0.2984,
      0.2363,
      -0.3999,
      0.2798,
      -0.4366,
      0.4274,
      -0.2673,
      0.4064,
      -0.3316,
      0.3698,
      -0.4563,
      0.3845,
      -0.2591,
      0.2037,
      -0.1456,
      0.1858,
      -0.148,
      0.0884,
      -0.0978,
      0.2054,
      -0.2026,
      0.2312,
      -0.1431,
      0.1712,
      -0.1635,
      0.2173,
      -0.2353,
      0.3906,
      -0.3106,
      0.3079,
      -0.172,
      0.3549,
      -0.2571,
      0.2238,
      -0.5005,
      0.2225,
      -0.3319,
      0.2055,
      -0.5124,
      0.1708,
      -0.3695,
      0.3901,
      -0.2314,
      0.4487,
      -0.1678,
      0.1454,
      -0.0945,
      0.2675,
      -0.1408,
      0.3206,
      -0.0493,
      0.2283,
      -0.1925,
      0.1509,
      -0.087,
      0.0825,
      -0.1119,
      0.1416,
      -0.179,
      0.2254,
      -0.3047,
      0.2052,
      -0.4301,
      0.5177,
      -0.7642,
      0.3143,
      -0.2976,
      0.2255,
      -0.145,
      0.2614,
      -0.1877,
      0.2187,
      -0.3485,
      0.238,
      -0.3464,
      0.3231,
      -0.3016,
      0.2487,
      -0.3423,
      0.6754,
      -0.4423,
      0.6298,
      -0.6577,
      0.1683,
      -0.2164,
      0.316,
      -0.2117,
      0.1858,
      -0.28,
      0.29,
      -0.1404,
      0.7435,
      -0.5394,
      0.5733,
      -0.5536,
      0.5508,
      -0.6961,
      0.2238,
      -0.4209,
      0.3524,
      -0.2526,
      0.2779,
      -0.1934,
      0.1964,
      -0.2223,
      0.0851,
      -0.1174,
      0.447,
      -0.6755,
      0.7305,
      -0.7927,
      0.5635,
      -0.6885,
      0.1049,
      -0.6405,
      0.5388,
      -0.743,
      0.3757,
      -0.4358,
      0.1973,
      -0.3681,
      0.4356,
      -0.3122,
      0.235,
      -0.377,
      0.5039,
      -0.4158,
      0.1988,
      -0.5359,
      0.2067,
      -0.2266,
      0.2148,
      -0.1908,
      0.1887,
      -0.1598,
      0.1249,
      -0.2298,
      0.4763,
      -0.6672,
      0.6529,
      -0.9266,
      0.4429,
      -0.293,
      0.208,
      -0.3003,
      0.324,
      -0.2906,
      0.2,
      -0.3219,
      0.1957,
      -0.3837,
      0.9664,
      -0.5712,
      0.642,
      -0.6541,
      0.2541,
      -0.1861,
      0.3008,
      -0.2296,
      0.2182,
      -0.4103,
      0.1616,
      -0.1804,
      0.1018,
      -0.0987,
      0.1061,
      -0.257,
      0.5648,
      -0.8337,
      0.7739,
      -0.8315,
      0.1712,
      -0.0542,
      0.4129,
      -0.5899,
      0.3674,
      -0.5992,
      0.2441,
      -0.3603,
      0.4229,
      -0.7443,
      0.5917,
      -0.326,
      0.3929,
      -0.6821,
      0.4642,
      -0.4507,
      0.795,
      -0.3044,
      0.7251,
      -0.6004,
      0.5633,
      -0.6902,
      0.5711,
      -0.4252,
      0.4008,
      -0.9132,
      0.7169,
      -0.6541,
      0.2862,
      -0.2783,
      0.3052,
      -0.6842,
      0.6014,
      -0.389,
      0.2312,
      -0.3724,
      0.2712,
      -0.2175,
      0.665,
      -0.4816,
      0.573,
      -0.8616,
      0.5951,
      -0.6884,
      0.9037,
      -0.4702,
      0.4058,
      -0.8607,
      0.6495,
      -0.6667,
      0.5429,
      -0.7208,
      0.5994,
      -0.2705,
      0.7026,
      -0.7601,
      0.5309,
      -0.7119,
      0.3826,
      -0.5475,
      0.4199,
      -0.366,
      0.4505,
      -0.6427,
      0.341,
      -0.5162,
      0.7021,
      -0.6826,
      0.5883,
      -0.5126,
      0.5281,
      -0.4249,
      0.6628,
      -0.2822,
      0.3746,
      -0.2086,
      0.4501,
      -0.5594,
      0.4996,
      -0.569,
      0.3097,
      -0.3237,
      0.3796,
      -0.6306,
      0.6236,
      -0.6415,
      0.3464,
      -0.5852,
      0.4815,
      -0.3471,
      0.2654,
      -0.4532,
      0.3337,
      -0.2979,
      0.4889,
      -0.4243,
      0.5063,
      -0.3525,
      0.399,
      -0.313,
      0.4107,
      -0.2754,
      0.2814,
      -0.2431,
      0.5583,
      -0.5534,
      0.4666,
      -0.4677,
      0.6999,
      -0.7188,
      0.3264,
      -0.3956,
      0.4158,
      -0.804,
      0.3148,
      -0.7038,
      0.0396,
      -0.7141,
      0.3088,
      -0.5772,
      0.2203,
      -0.8877,
      0.1496,
      -0.2766,
      0.3602,
      -0.359,
      0.6461,
      -0.4483,
      0.6614,
      -0.3649,
      0.3986,
      -0.3849,
      0.2608,
      -0.4672,
      0.3934,
      -0.8962,
      0.5444,
      -0.6719,
      0.6824,
      -0.4459,
      0.386,
      -0.9946,
      0.7444,
      -0.9858,
      0.4362,
      -0.6694,
      0.4526,
      -0.5376,
      0.3824,
      -0.6004,
      0.5762,
      -0.6021,
      0.2377,
      -0.5092,
      0.9949,
      -0.4544,
      0.5507,
      -0.8771,
      0.4382,
      -0.6331,
      0.6496,
      -0.5688,
      0.5859,
      -0.7245,
      0.5635,
      -0.4636,
      0.4673,
      -0.3079,
      0.4035,
      -0.2536,
      0.4759,
      -0.6036,
      0.5039,
      -0.4904,
      0.4236,
      -0.411,
      0.514,
      -0.3661,
      0.2728,
      -0.7243,
      0.2925,
      -0.4847,
      0.2639,
      -0.152,
      0.7055,
      -0.7003,
      0.3568,
      -0.5999,
      0.5111,
      -0.7614,
      0.4528,
      -0.672,
      0.5274,
      -0.2665,
      0.4934,
      -0.6237,
      0.4414,
      -0.6022,
      0.5957,
      -0.3586,
      0.4127,
      -0.6246,
      0.4801,
      -0.3682,
      0.516,
      -0.3353,
      0.3059,
      -0.4211,
      0.4718,
      -0.4773,
      0.4221,
      -0.5046,
      0.6612,
      -0.5043,
      0.3147,
      -0.4233,
      0.376,
      -0.5103,
      0.5269,
      -0.3184,
      0.2618,
      -0.4363,
      0.5807,
      -0.4377,
      0.3703,
      -0.6227,
      0.273,
      -0.3349,
      0.341,
      -0.395,
      0.5114,
      -0.4081,
      0.3461,
      -0.4228,
      0.582,
      -0.3077,
      0.4726,
      -0.9581,
      0.7056,
      -0.4771,
      0.5051,
      -0.2534,
      0.3921,
      -0.6512,
      0.2846,
      -0.3761,
      0.6891,
      -0.4867,
      0.3005,
      -0.4381,
      0.4009,
      -0.5261,
      0.971,
      -0.1688,
      0.8726,
      -0.3844,
      0.5392,
      -0.5623,
      0.7255,
      -0.3472,
      0.8155,
      -1,
      0.3617,
      -0.6132,
      0.3538,
      -0.4727,
      0.3775,
      -0.2387,
      0.9183,
      -0.3139,
      0.3846,
      -0.6655,
      0.6879,
      -0.6075,
      0.1948,
      -0.4577,
      0.7225,
      -0.5254,
      0.3682,
      -0.5965,
      0.4251,
      -0.3493,
      0.8513,
      -0.4673,
      0.4019,
      -0.3668,
      0.912,
      -0.6885,
      0.2011,
      -0.4684,
      0.6969,
      -0.5791,
      0.2484,
      -0.41,
      0.318,
      -0.8206,
      0.9535,
      -0.3616,
      0.4552,
      -0.4787,
      0.5445,
      -0.3461,
      0.4485,
      -0.4291,
      0.5078,
      -0.6432,
      0.2804,
      -0.2784,
      0.4674,
      -0.7671,
      0.4845,
      -0.5057,
      0.5882,
      -0.4589,
      0.9172,
      -0.8367,
      0.756,
      -0.5195,
      0.9507,
      -0.9846,
      0.6412,
      -0.6806,
      0.6195,
      -0.3316,
      0.5473,
      -0.2923,
      0.6955,
      -0.8171,
      0.475,
      -0.5102,
      0.2784,
      -0.5433,
      0.9626,
      -0.2831,
      0.3187,
      -0.9642,
      0.2653,
      -0.8379,
      0.9282,
      -0.3878,
      0.4314,
      -0.553,
      0.4768,
      -0.3643,
      0.1743,
      -0.3407,
      0.3775,
      -0.2604,
      0.3348,
      -0.2685,
      0.342,
      -0.3665,
      0.3167,
      -0.5746,
      0.6395,
      -0.3179,
      0.6941,
      -0.5019,
      0.5323,
      -0.9802,
      0.7113,
      -0.8667,
      0.9241,
      -0.6164,
      0.9914,
      -0.7463,
      0.643,
      -0.9055,
      0.6547,
      -0.6199,
      0.7037,
      -0.6364,
      0.8964,
      -0.6849,
      0.8322,
      -0.6059,
      0.9533,
      -0.8041,
      0.9436,
      -0.6936,
      0.6983,
      -0.6666,
      0.8735,
      -0.7602,
      0.4654,
      -0.6699,
      0.9789,
      -0.7597,
      0.7175,
      -0.8295,
      0.9385,
      -0.5834,
      0.8853,
      -0.5505,
      0.7596,
      -0.9813,
      0.7894,
      -0.7502,
      0.6534,
      -0.8026,
      0.666,
      -0.4875,
      0.6536,
      -0.6843,
      0.5215,
      -0.7335,
      0.9164,
      -0.8962,
      0.067,
      -0.7999,
      0.8362,
      -0.4768,
      0.8871,
      -0.747,
      0.6997,
      0,
      0.9533,
      -0.7506,
      0.5541,
      -0.7776,
      0.6096,
      -0.6744,
      0.8889,
      -0.6387,
      0.7127,
      -0.6114,
      0.7768,
      -0.532,
      0.6119,
      -0.8396,
      0.7011,
      -0.6115,
      0.7949,
      -0.6366,
      0.701,
      -0.8599,
      0.8899,
      -0.7302,
      0.6336,
      -0.9126,
      1.002,
      -0.778,
      0.7493,
      -0.5149,
      0.754,
      -0.6741,
      0.9191,
      -0.8396,
      0.6832,
      -0.6893,
      0.8394,
      -0.9046,
      0.9462,
      -0.9294,
      0.7629,
      -0.7912,
      0.7405,
      -0.7421,
      0.5861,
      -0.5524,
      0.5927,
      -0.757,
      0.6576,
      -0.7983,
      0.7474,
      -0.7758,
      0.4796,
      -0.8439,
      0.91,
      -0.4697,
      0.8986,
      -0.5027,
      1.0411,
      0,
      0.8051,
      -0.8931,
      0.684,
      -1.0133,
      0.8228,
      -0.6375,
      0.6663,
      -0.9038,
      0.8811,
      -0.4951,
      0.9262,
      -0.9433,
      0.9138,
      -0.6502,
      0.7203,
      -0.6635,
      0.7256,
      -0.8603,
      0.7726,
      -0.4702,
      1.0676,
      -0.7785,
      0.7684,
      -0.8718,
      0.9069,
      -0.7809,
      0.7266,
      -0.99,
      0.9618,
      -0.68,
      0.9677,
      -0.8788,
      0.8118,
      -0.6055,
      0.931,
      -0.6841,
      0.9659,
      -0.7519,
      0.9821,
      -0.7315,
      0.9411,
      -0.7444,
      0.9226,
      -0.7521,
      0.5627,
      -0.6873,
      0.965,
      -0.6369,
      0.8333,
      -0.7274,
      0.859,
      -0.7435,
      0.7153,
      -0.4602,
      0.8383,
      -0.377,
      0.964,
      0,
      0.794,
      -0.6078,
      0.4523,
      -0.9393,
      0.7085,
      -0.6272,
      0.89,
      -0.9214,
      0.9792,
      -0.838,
      0.9295,
      -0.7457,
      0.7711,
      -0.8938,
      0.8083,
      -0.8549,
      0.7683,
      -0.7216,
      0.73,
      -0.6715,
      0.8922,
      -0.6237,
      0.6659,
      -0.6862,
      0.8692,
      -0.5088,
      1.0007,
      -0.8636,
      1.0046,
      -0.7552,
      0.813,
      -0.5579,
      0.2822,
      -0.5648,
      0.6731,
      -0.6824,
      0.6393,
      -0.8876,
      0.9327,
      -1.0212,
      0.6997,
      -0.8589,
      0.8306,
      -0.6266,
      0.5277,
      -0.6185,
      0.6994,
      -0.5059,
      0.6529,
      -0.5517,
      0.9325,
      -0.6479,
      0.8961,
      -0.3973,
      0.8868,
      -0.1804,
      0.9741,
      0,
      0.8236,
      -1.0121,
      0.1956,
      -0.639,
      0.0619,
      -0.6251,
      0.1637,
      -0.6229,
      0.1637,
      -0.2211,
      0.271,
      -0.3554,
      0.4889,
      -0.7087,
      0.4634,
      -0.3297,
      0.4216,
      -0.6581,
      0.3742,
      -0.2393,
      0.2598,
      -0.3199,
      0.2345,
      -0.2286,
      0.4427,
      -0.254,
      0.2344,
      -0.1286,
      0.4001,
      -0.1659,
      0.2137,
      -0.3227,
      0.8284,
      -0.6858,
      0.6604,
      -0.5037,
      0.5188,
      -0.569,
      0.7702,
      -0.4101,
      0.3671,
      -0.3368,
      0.2322,
      -0.4505,
      0.2047,
      -0.2887,
      0.343,
      -0.2169,
      0.4623,
      -0.9458,
      0.4192,
      -0.6143,
      0.4104,
      -0.3734,
      0.708,
      -0.1148,
      0.4341,
      -0.7171,
      0.4093,
      -0.0359,
      0.8041,
      -0.1879,
      0.822,
      -0.1475,
      0.7159,
      -0.4994,
      0.6622,
      -0.5743,
      0.8175,
      -0.4905,
      0.3299,
      -0.6722,
      0.5528,
      -0.4996,
      0.3359,
      -0.2956,
      0.7329,
      -0.3813,
      0.6682,
      -0.8261,
      0.5089,
      -0.6305,
      0.5995,
      -0.2613,
      0.4854,
      -0.3169,
      0.4184,
      -0.3276,
      0.3399,
      -0.4516,
      0.4916,
      -0.5761,
      0.5876,
      -0.556,
      0.5218,
      -0.3609,
      0.9716,
      -0.4618,
      0.5506,
      -0.2061,
      0.4011,
      -0.2333,
      0.2481,
      -0.3065,
      0.4167,
      -0.3166,
      0.3006,
      -0.8527,
      0.3842,
      -0.6958,
      0.3234,
      -0.3808,
      0.5459,
      -0.3301,
      0.7497,
      -0.3983,
      0.3357,
      -0.2254,
      0.6435,
      -0.0416,
      0.7339,
      -0.5506,
      0.6734,
      -0.3732,
      0.654,
      -0.2667,
      0.4377,
      -0.2707,
      0.579,
      -0.4545,
      0.2264,
      -0.4498,
      0.7366,
      -0.5991,
      0.8733,
      -0.2765,
      0.4081,
      -0.5144,
      0.8777,
      -0.5211,
      0.5316,
      -0.2606,
      0.4589,
      -0.522,
      0.4742,
      -0.3203,
      0.4215,
      -0.4885,
      0.4662,
      -0.4965,
      0.6341,
      -0.6479,
      0.4974,
      -0.4136,
      0.5558,
      -0.477,
      0.4738,
      -0.3209,
      0.4159,
      -0.2,
      0.4424,
      -0.2666,
      0.4056,
      -0.3015,
      0.2182,
      -0.9332,
      0.3755,
      -0.7077,
      0.2823,
      -0.3683,
      0.5441,
      -0.4512,
      0.6918,
      -0.6496,
      0.2129,
      -0.5535,
      0.3489,
      -0.2771,
      0.4959,
      -0.6276,
      0.3847,
      -0.4189,
      0.3901,
      -0.474,
      0.5315,
      -0.2539,
      0.6064,
      -0.5251,
      0.5032,
      -0.3795,
      0.5509,
      -0.2782,
      0.5336,
      -0.4542,
      0.3499,
      -0.4487,
      0.6656,
      -0.4647,
      0.4783,
      -0.2832,
      0.5936,
      -0.4934,
      0.6165,
      -0.3343,
      0.7426,
      -0.2305,
      0.6198,
      -0.7426,
      0.5255,
      -0.2935,
      0.2313,
      -0.4974,
      0.0653,
      -0.6188,
      0.3975,
      -0.4647,
      0.5502,
      -0.0881,
      0.4771,
      -0.4889,
      0.3294,
      -0.4549,
      0,
      -0.6461,
      0.5061,
      -0.6057,
      0.3098,
      -0.7064,
      0.0792,
      -0.5846,
      0.9616,
      -0.8214,
      0.3037,
      -0.8732,
      0.2337,
      -0.3437,
      0.9544,
      -0.4712,
      0.6668,
      -0.4226,
      0.3348,
      -0.2139,
      0.3486,
      -0.2753,
      0.9538,
      -0.5047,
      0.5387,
      -0.8851,
      0.7553,
      -0.5333,
      0.288,
      -0.4653,
      0.8824,
      -0.9419,
      0.9711,
      -0.9367,
      0.4271,
      -0.4067,
      0.3757,
      -0.9164,
      0.2726,
      -0.5785,
      0.4864,
      -0.4589,
      0.7423,
      -0.4692,
      0.7856,
      -0.8592,
      0.6702,
      -0.42,
      0.7167,
      -0.4636,
      0.4894,
      -0.3339,
      0.4724,
      -0.6882,
      0.5576,
      -0.4733,
      0.4264,
      -0.5178,
      0.3177,
      -0.9807,
      0.5685,
      -0.3393,
      0.9471,
      -0.7392,
      0.3377,
      -0.4298,
      0.9484,
      -0.6679,
      0.8328,
      -0.7547,
      0.633,
      -0.369,
      0.8968,
      -0.8404,
      0.9181,
      -0.8912,
      0.6319,
      -0.573,
      0.6889,
      -0.8364,
      0.5305,
      -0.4771,
      0.2592,
      -0.5616,
      0.6737,
      -0.8933,
      0.3644,
      -0.4246,
      0.3025,
      -0.5558,
      0.905,
      -0.8127,
      0.8735,
      -0.7182,
      0.8323,
      -0.3972,
      0.4788,
      -0.4978,
      0.4027,
      -0.4063,
      0.4945,
      -0.337,
      0.9184,
      -0.8411,
      0.5316,
      -0.4599,
      0.7412,
      -0.2961,
      0.4012,
      -0.4618,
      0.4855,
      -0.884,
      0.5127,
      -0.6482,
      0.6745,
      -0.3391,
      0.2731,
      -0.2458,
      0.6345,
      -0.1878,
      0.938,
      -0.5995,
      0.2865,
      -0.2117,
      0.1742,
      -0.519,
      0.8892,
      -0.9259,
      0.1635,
      -0.5412,
      0.8615,
      -0.8407,
      0.6256,
      -0.509,
      0.6883,
      -0.5425,
      0.3912,
      -0.3199,
      0.5382,
      -0.4059,
      0.8427,
      -0.5626,
      0.7952,
      -0.996,
      0.2216,
      -0.6673,
      0.8824,
      -0.7372,
      0.6214,
      -0.7197,
      0.6369,
      -0.9649,
      0.6085,
      -0.3377,
      0.5412,
      -0.5156,
      0.6325,
      -0.4715,
      0.3787,
      -0.3592,
      0.7117,
      -0.9838,
      0.4292,
      -0.8112,
      0.8623,
      -0.7179,
      0.4633,
      -0.9158,
      0.738,
      -0.6865,
      0.7515,
      -0.684,
      0.4038,
      -0.6753,
      0.6387,
      -0.3979,
      0.5552,
      -0.6105,
      0.5682,
      -0.5076,
      0.6012,
      -0.4329,
      0.3879,
      -0.7036,
      0.8163,
      -0.8828,
      0.4858,
      -0.7515,
      0.3829,
      -0.3706,
      0.7789,
      -0.7911,
      0.7626,
      -0.4992,
      0.8145,
      -0.6975,
      0.6712,
      -0.4724,
      0.4519,
      -0.6334,
      0.4872,
      -0.6172,
      0.6181,
      -0.5153,
      0.3616,
      -0.2605,
      0.2971,
      -0.3527,
      0.5319,
      -0.6966,
      0.3436,
      -0.3464,
      0.4321,
      -0.5963,
      0.6217,
      -0.22,
      0.3079,
      -0.9217,
      0.6326,
      -0.393,
      0.6054,
      -0.4377,
      0.2592,
      -0.8677,
      0.4651,
      -0.5189,
      0.3962,
      -0.3558,
      0.2708,
      -0.4383,
      0.3124,
      -0.1006,
      0.2933,
      -0.5156,
      0.3108,
      -0.3474,
      0.204,
      -0.3147,
      0.4206,
      -0.4191,
      0.4653,
      -0.5763,
      0.6087,
      -0.5758,
      0.4729,
      -0.2228,
      0.2885,
      -0.633,
      0.567,
      -0.4555,
      0.6378,
      -0.8171,
      0.8181,
      -1.0004,
      0.8035,
      -0.8657,
      0.8278,
      -0.6869,
      0.6571,
      -0.4318,
      0.7049,
      -0.6139,
      0.6448,
      -0.704,
      0.8287,
      -0.7329,
      0.483,
      -0.5772,
      0.8344,
      -1.0553,
      0.5839,
      -0.6526,
      0.845,
      -0.8325,
      0.5727,
      -0.6726,
      0.6877,
      -0.5985,
      0.6098,
      -0.7786,
      0.8135,
      -0.7409,
      0.8867,
      -0.732,
      0.9881,
      -0.9218,
      0.6894,
      -0.5248,
      0.651,
      -0.8028,
      0.6867,
      -0.8458,
      0.6682,
      -0.6596,
      0.7093,
      -0.5231,
      1.0013,
      -0.1147,
      0.9559,
      0,
      0.843,
      -0.4541,
      0.8724,
      -0.339,
      0.4873,
      -0.9948,
      0.5955,
      -0.6894,
      0.624,
      -0.7152,
      0.774,
      -0.8524,
      0.6114,
      -0.6853,
      0.6175,
      -0.6773,
      0.8539,
      -0.6704,
      0.6524,
      -0.6875,
      0.6403,
      -0.6288,
      0.5749,
      -0.8615,
      0.789,
      -0.42,
      0.5957,
      -0.9413,
      0.5329,
      -0.9756,
      0.7552,
      -0.8412,
      0.7394,
      -0.5621,
      0.9337,
      -0.5248,
      0.6443,
      -0.5883,
      0.67,
      -0.924,
      0.8719,
      -0.8099,
      0.7956,
      -0.7837,
      0.8503,
      -0.669,
      0.8302,
      -0.5539,
      0.8357,
      -0.754,
      0.6072,
      -0.8498,
      0.6211,
      -0.8155,
      0.8793,
      -0.2784,
      0.8125,
      0,
      1.0109,
      -0.0481,
      0.8021,
      -0.5095,
      0.3836,
      -0.7031,
      0.752,
      -0.6095,
      0.8362,
      -0.8106,
      0.8175,
      -1.0225,
      0.8021,
      -0.8043,
      0.7961,
      -0.7903,
      0.9716,
      -1.0492,
      0.9555,
      -0.6354,
      0.9542,
      -0.6182,
      0.5754,
      -1.031,
      0.656,
      -0.4884,
      0.9312,
      -0.3924,
      0.744,
      -0.8089,
      0.9169,
      -0.7779,
      0.7208,
      -0.5482,
      0.7073,
      -0.6339,
      0.9241,
      -0.824,
      0.7675,
      -0.7511,
      0.7859,
      -0.9854,
      0.6066,
      -0.9175,
      0.869,
      -0.6753,
      0.6638,
      -0.4902,
      0.7654,
      -0.4111,
      0.7412,
      -0.7681,
      0.6675,
      -0.9329,
      0.9518,
      -0.5021,
      0.969,
      0,
      1.0173,
      0,
      0.6088,
      -0.8117,
      0.7013,
      -0.5691,
      0.82,
      -0.9273,
      0.8504,
      -0.73,
      0.9396,
      -0.6035,
      0.9417,
      -0.7582,
      0.6924,
      -0.778,
      0.9813,
      -0.9976,
      0.9358,
      -0.6784,
      0.7495,
      -0.6836,
      0.6852,
      -0.8561,
      0.5216,
      -0.8409,
      0.9068,
      -0.5826,
      0.8249,
      -0.924,
      0.9364,
      -0.9451,
      0.9865,
      -0.8649,
      0.7286,
      -0.6623,
      0.8609,
      -0.7618,
      0.9305,
      -0.776,
      0.8495,
      -0.6704,
      0.7382,
      -0.7168,
      0.7545,
      -0.7984,
      0.6217,
      -0.7275,
      0.6446,
      -0.9937,
      0.7703,
      -0.7711,
      0.7811,
      -0.5859,
      0.5376,
      -0.2958,
      0.9556,
      -0.0307,
      0.9206,
      0,
      0.6725,
      -0.4891,
      0.2702,
      -0.6787,
      0.0976,
      -0.6518,
      0.2007,
      -0.6985,
      0.4578,
      -0.5883,
      0.4947,
      -0.4126,
      0.4242,
      -0.3676,
      0.5308,
      -0.4992,
      0.4968,
      -0.4162,
      0.4514,
      -0.531,
      0.541,
      -0.5746,
      0.3775,
      -0.4028,
      0.4982,
      -0.5727,
      0.3475,
      -0.3601,
      0.1406,
      -0.7893,
      0.4483,
      -0.5598,
      0.66,
      -0.8619,
      0.6037,
      -0.5264,
      0.3183,
      -0.5714,
      0.3057,
      -0.3709,
      0.3587,
      -0.7115,
      0.6272,
      -0.5908,
      0.5651,
      -0.6811,
      0.6381,
      -0.6976,
      0.6071,
      -0.4855,
      0.4783,
      -0.5315,
      0.5062,
      -0.5628,
      0.6345,
      -0.6023,
      0.5538,
      -0.339,
      0.5889,
      -0.3178,
      0.2993,
      -0.3098,
      0.5639,
      -0.5109,
      0.3674,
      -0.433,
      0.5155,
      -0.4333,
      0.4389,
      -0.5088,
      0.5476,
      -0.4064,
      0.6107,
      -0.3503,
      0.2405,
      -0.3252,
      0.4203,
      -0.5809,
      0.3496,
      -0.6468,
      0.2716,
      -0.4012,
      0.3204,
      -0.7931,
      0.5526,
      -0.3797,
      0.3797,
      -0.4347,
      0.5816,
      -0.5456,
      0.5684,
      -0.917,
      0.7277,
      -0.2932,
      0.3517,
      -0.5667,
      0.3666,
      -0.6153,
      0.5817,
      -0.4536,
      0.1546,
      -0.4825,
      0.5453,
      -0.4193,
      0.445,
      -0.5992,
      0.445,
      -0.6155,
      0.0587,
      -0.6428,
      0.3959,
      -0.3548,
      0.1998,
      -0.55,
      0.371,
      -0.6609,
      0.1916,
      -0.8253,
      0.2498,
      -0.5701,
      0.2866,
      -0.6134,
      0.461,
      -0.7779,
      0.5582,
      -0.6754,
      0.2922,
      -0.4985,
      0.3652,
      -0.1939,
      0.2645,
      -0.6674,
      0.4622,
      -0.5414,
      0.4381,
      -0.3552,
      0.5216,
      -0.5017,
      0.4949,
      -0.3495,
      0.4306,
      -0.6959,
      0.3336,
      -0.6636,
      0.2667,
      -0.7624,
      0.0783,
      -0.7753,
      0.2886,
      -0.3361,
      0.5141,
      -0.5019,
      0.6672,
      -0.3468,
      0.4384,
      -0.5507,
      0.3999,
      -0.5268,
      0.541,
      -0.6299,
      0.4413,
      -0.5208,
      0.4605,
      -0.3506,
      0.4684,
      -0.3016,
      0.4342,
      -0.4964,
      0.6038,
      -0.3989,
      0.5977,
      -0.432,
      0.3608,
      -0.6077,
      0.5079,
      -0.6274,
      0.4979,
      -0.4135,
      0.4179,
      -0.5721,
      0.6044,
      -0.3551,
      0.4453,
      -0.5201,
      0.2981,
      -0.6235,
      0.2749,
      -0.3811,
      0.3318,
      -0.2347,
      0.4995,
      -0.1853,
      0.5613,
      -0.4671,
      0.6159,
      -0.4611,
      0.4849,
      -0.5032,
      0.3591,
      -0.6168,
      0.3094,
      -0.2857,
      0.5279,
      -0.3124,
      0.4256,
      -0.2935,
      0.3526,
      -0.5116,
      0.3591,
      -0.3174,
      0.3138,
      -0.3626,
      0.3428,
      -0.5464,
      0.5172,
      -0.6637,
      0.5016,
      -0.5082,
      0.3231,
      -0.4304,
      0.3695,
      -0.0862,
      0.3125,
      -0.381,
      0.1573,
      -0.2632,
      0.6894,
      -0.4895,
      0.4677,
      -0.709,
      0.4976,
      -0.4774,
      0.3869,
      -0.2912,
      0.4712,
      -0.4553,
      0.4038,
      -0.4333,
      0.8409,
      -0.2924,
      0.9423,
      -0.6846,
      0.8529,
      -0.6063,
      0.681,
      -0.6143,
      0.9578,
      -0.6974,
      0.7739,
      -0.7565,
      0.9179,
      -0.7238,
      0.801,
      -0.8476,
      0.5506,
      -0.5918,
      0.6118,
      -0.6805,
      0.8764,
      -0.8812,
      0.835,
      -0.588,
      0.8554,
      -0.8086,
      0.6606,
      -0.8252,
      0.5512,
      -0.6583,
      0.9449,
      -0.6555,
      0.884,
      -0.8738,
      0.9756,
      -0.8651,
      0.8323,
      -0.865,
      0.7535,
      -0.9304,
      0.9014,
      -0.9088,
      0.7955,
      -0.943,
      0.8227,
      -0.6687,
      0.8235,
      -0.4913,
      0.8354,
      -0.9165,
      0.9012,
      -0.8923,
      0.9741,
      -0.7005,
      0.9882,
      -0.8573,
      0.7021,
      -0.6234,
      0.5994,
      -0.6459,
      1.0013,
      -0.7183,
      0.92,
      -0.6589,
      0.8788,
      -0.6806,
      0.8285,
      -0.7889,
      0.8592,
      -0.798,
      0.9022,
      -0.6824,
      0.7964,
      -0.4165,
      0.8629,
      -0.5901,
      0.829,
      -1.0075,
      0.904,
      -0.8076,
      0.7866,
      -0.5262,
      0.8404,
      -0.8638,
      0.9301,
      -0.7138,
      0.8312,
      -0.5561,
      0.8343,
      -0.3764,
      0.7586,
      -0.8097,
      0.9113,
      -0.5895,
      0.9838,
      -0.7664,
      0.8366,
      -0.7849,
      0.6823,
      -0.7188,
      0.3573,
      -0.7906,
      0.6497,
      -0.6713,
      0.6498,
      -0.692,
      0.9963,
      -0.9592,
      0.8974,
      0,
      0.9908,
      -0.0679,
      0.4428,
      -0.8267,
      0.3752,
      -0.8477,
      0.5688,
      -0.8945,
      0.7791,
      -0.8556,
      0.8037,
      -0.7617,
      0.7564,
      -0.7897,
      0.6928,
      -0.7829,
      0.677,
      -0.8486,
      0.8131,
      -0.7435,
      0.837,
      -0.8103,
      0.8336,
      -0.7182,
      0.908,
      -0.8372,
      0.6764,
      -0.7685,
      0.8221,
      -0.721,
      0.8937,
      -0.5574,
      0.8494,
      -0.8034,
      0.76,
      -0.6963,
      0.7692,
      -0.5963,
      0.8941,
      -0.8542,
      0.8056,
      -0.7915,
      0.9256,
      -0.8804,
      1.0553,
      -0.8645,
      0.877,
      -0.7238,
      0.9066,
      -0.7838,
      0.8707,
      -0.6741,
      0.8667,
      -0.7043,
      0.6018,
      -0.9367,
      0.7877,
      -0.8078,
      0.7999,
      -0.8292,
      0.6149,
      -0.6135,
      0.6525,
      -0.9074,
      0.9364,
      -0.8946,
      0.8522,
      -0.5968,
      0.929,
      -0.8797,
      0.7806,
      -0.8126,
      1.0186,
      -0.5891,
      0.9421,
      -0.7532,
      0.9487,
      -0.6704,
      0.3823,
      -0.7198,
      0.5752,
      -0.9159,
      0.5201,
      -0.6169,
      0.5669,
      -0.9495,
      0.7415,
      -0.9506,
      1.0094,
      -0.7358,
      0.7755,
      -0.7787,
      0.8825,
      -0.6963,
      0.7021,
      -0.8181,
      0.597,
      -0.626,
      0.5843,
      -0.6537,
      0.7943,
      -0.7338,
      0.7952,
      -0.5538,
      0.4805,
      -0.7273,
      0.9852,
      -0.9189,
      0.9193,
      -0.6923,
      0.4825,
      -0.4797,
      0.7437,
      -0.4924,
      0.9877,
      -0.9582,
      0.854,
      0,
      0.7215,
      -0.9287,
      0.114,
      -0.9877,
      0.886,
      -0.6296,
      0.0286,
      -0.4703,
      0.1133,
      -0.2251,
      0.174,
      0,
      0.159,
      0,
      0.0688,
      0,
      0.0041,
      -0.0096,
      0,
      -0.0076,
      0,
      -0.0059,
      0.0002,
      -0.0018,
      0.0002,
      -0.0002,
      0.0001,
      -0.0001,
      0.0001,
      -0.0001,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
    ];
    const positiveValues = [];
    const negativeValues = [];

    // Calculate all positive, negative values
    for (let i = 0; i < original_data.length - 2; i += 7) {
      // Add full-size bars to positive values
      // Add 1/5-size bars to negative values
      if (original_data[i] >= 0) {
        positiveValues.push(original_data[i]);
        negativeValues.push(-(original_data[i] + original_data[i + 2]) / 10);
      } else {
        positiveValues.push(-(original_data[i] + original_data[i + 2]) / 2);
        negativeValues.push(original_data[i] / 2.5);
      }
    }

    // Get empty labels
    const xValues = original_data
      .slice(0, original_data.length / 7)
      .map((value) => '');

    // Get chart element
    const ctx = document.getElementById('playback-chart').getContext('2d');

    // Create color gradient
    const gradientStroke = ctx.createLinearGradient(
      this.state.songPlayerPixelWidth *
        (this.state.currentSongAudio.currentTime /
          this.state.currentSongAudio.duration),
      0,
      this.state.songPlayerPixelWidth *
        (this.state.currentSongAudio.currentTime /
          this.state.currentSongAudio.duration) +
        10,
      0
    );
    gradientStroke.addColorStop(0, '#f50');
    gradientStroke.addColorStop(1, '#CCCCCC');

    // Create data objects
    var positiveData = {
      data: positiveValues,
      backgroundColor: gradientStroke,
      // backgroundColor: 'rgb(255, 99, 132)',
    };

    var negativeData = {
      data: negativeValues,
      backgroundColor: gradientStroke,
      // backgroundColor: 'rgb(255, 99, 132)',
    };

    // Create bar chart
    const myBarChart = new Chart(ctx, {
      type: 'bar',
      data: {
        labels: xValues,
        datasets: [positiveData, negativeData],
      },
      options: {
        tooltips: {enabled: false},
        hover: {mode: null},
        animation: {
          duration: 0,
          onProgress: () => {},
          onComplete: () => {},
        },
        scales: {
          xAxes: [
            {
              display: false,
              stacked: true,
              gridLines: {
                color: 'rgba(0, 0, 0, 0)',
                drawBorder: false,
              },
              ticks: {
                display: false, //this will remove only the label
              },
            },
          ],
          yAxes: [
            {
              stacked: false,
              gridLines: {
                color: 'rgba(0, 0, 0, 0)',
                drawBorder: false,
              },
              ticks: {
                display: false,
              },
            },
          ],
        },
        legend: {
          display: false,
        },
      },
    });
  }

  // Update colors on playback waveform bar chart
  updateWaveformColor() {
    console.log('update waveform color called');
    const ctx = this.refs.canvas.getContext('2d');
    ctx.fillRect(
      this.state.songPlayerPixelWidth *
        (this.state.currentSongAudio.currentTime /
          this.state.currentSongAudio.duration),
      0,
      this.state.songPlayerPixelWidth *
        (this.state.currentSongAudio.currentTime /
          this.state.currentSongAudio.duration) +
        10,
      0
    );
    const gradientStroke = ctx.createLinearGradient(
      this.state.songPlayerPixelWidth *
        (this.state.currentSongAudio.currentTime /
          this.state.currentSongAudio.duration),
      0,
      this.state.songPlayerPixelWidth *
        (this.state.currentSongAudio.currentTime /
          this.state.currentSongAudio.duration) +
        10,
      0
    );
    gradientStroke.addColorStop(0, '#f50');
    gradientStroke.addColorStop(1, '#999999');
  }

  // Render App component
  render() {
    const {playButtonState} = this.state;
    const {
      currentTime,
      currentTimeMMSS,
      durationMMSS,
      artist_name,
      song_name,
      date_posted,
      tag,
      song_art_url,
    } = this.state.currentSongObj;
    const currentSongAudio = this.state.currentSongAudio || 60;
    const length = currentSongAudio.duration || 60;
    return (
      <div>
        <div className='nav-bar'></div>
        {/* <button id='next-song-btn' onClick={this.playNextFromQueue}>
          Next Song
        </button> */}
        <div id='playbackCenter' className='outer-player-panel'>
          <div
            className='inner-player-panel'
            style={{
              background: `linear-gradient(
                135deg,
                rgb${this.state.currentSongObj.background_light} 0%,
                rgb${this.state.currentSongObj.background_dark} 100%`,
            }}
          >
            <div className='player-head'>
              <div
                className='play-button-wrapper'
                onClick={() => {
                  if (playButtonState === 'play') {
                    this.playSong();
                  } else {
                    this.pauseSong();
                  }
                }}
              >
                <div className={playButtonState + '-button'}></div>
              </div>
              <div className='artist-name-container'>
                <span className='artist-name fit-width-to-contents'>
                  {artist_name}
                </span>
              </div>
              <div className='song-name-container'>
                <span className='song-name fit-width-to-contents'>
                  {song_name}
                </span>
              </div>
              <div className='date-posted-container'>
                <div className='date-posted'>{date_posted}</div>
              </div>
              <div className='tags-container'>
                <div className='tags fit-width-to-contents'>{tag}</div>
              </div>
            </div>
            <div className='album-art'>
              <img src={song_art_url} alt='' className='album-art' />
            </div>
            <div className='song-player'>
              <div className='current-playback-timer-container'>
                <div className='current-playback-timer fit-width-to-contents'>
                  {currentTimeMMSS}
                </div>
              </div>
              <div className='total-song-length-container'>
                <div className='total-song-length'>{durationMMSS}</div>
              </div>
              <div
                className='waveform-container'
                ref={(divElement) => (this.divElement = divElement)}
              >
                <canvas
                  id='playback-chart'
                  ref='canvas'
                  className='waveform'
                ></canvas>
              </div>
              <div className='playback-slider-container'>
                <input
                  type='range'
                  min='0'
                  max={length}
                  value={currentTime}
                  onChange={this.handleSliderChange}
                  className='playback-slider'
                  style={{
                    background: `linear-gradient(
                      90deg, 
                      #f50 ${(this.state.currentSongAudio.currentTime /
                        this.state.currentSongAudio.duration) *
                        100}%, 
                      #999999 0%)`,
                  }}
                />
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  }
}

ReactDOM.render(<App />, document.querySelector('#app'));
